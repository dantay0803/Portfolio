{"version":3,"sources":["webpack:///./src/pages/projects/comic-manager.js"],"names":["StyledContainer","styled","Container","ComicManager","data","console","log","title","description","pathname","fluid","noGutters","xs","span","offset","to","className","icon","faWindowClose","size","md","href","target","rel","images","nodes","slice","map","image","i","key","childImageSharp","id"],"mappings":"0OAYMA,EAAkBC,YAAOC,KAAV,qFAAGD,CAAH,iHAwHNE,UA5GM,WACnB,IAAMC,EAAI,OAiBV,OAFAC,QAAQC,IAAIF,GAGV,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,MAAM,gBACNC,YAAa,oDACbC,SAAU,4BAEZ,kBAACT,EAAD,CAAiBU,OAAK,GACpB,kBAAC,IAAD,CAAKC,WAAS,GACZ,kBAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,KAC1B,kBAAC,OAAD,CAAMC,GAAI,aAAcC,UAAU,eAChC,kBAAC,IAAD,CAAiBC,KAAMC,IAAeC,KAAK,UAIjD,kBAAC,IAAD,CAAKR,WAAS,GACZ,kBAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1B,wBAAIE,UAAU,UAAd,iBACA,wBAAIA,UAAU,cAGlB,kBAAC,IAAD,CAAKL,WAAS,GACZ,kBAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,GAAIC,OAAQ,GAAKM,GAAI,CAAEP,KAAM,EAAGC,OAAQ,IACvD,wRAMA,uBAAGE,UAAU,UACX,uBACEK,KAAK,6CACLC,OAAO,SACPC,IAAI,uBAHN,wBASN,kBAAC,IAAD,CAAKZ,WAAS,GACXP,EAAKoB,OAAOC,MAAMC,MAAM,EAAG,GAAGC,KAAI,SAACC,EAAOC,GAAR,OACjC,kBAAC,IAAD,CACEjB,GAAI,CAAEC,KAAM,GAAIC,OAAQ,GACxBM,GAAU,IAANS,EAAU,CAAEhB,KAAM,EAAGC,OAAQ,GAAM,IACvCgB,IAAKF,EAAMG,gBAAgBC,IAC3B,kBAAC,IAAD,CAAKtB,MAAOkB,EAAMG,gBAAgBrB,MAAOM,UAAU,mBAIzD,kBAAC,IAAD,CAAKL,WAAS,GACZ,kBAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,GAAIC,OAAQ,GAAKM,GAAI,CAAEP,KAAM,EAAGC,OAAQ,IACvD,qZAUJ,kBAAC,IAAD,CAAKH,WAAS,GACXP,EAAKoB,OAAOC,MAAMC,MAAM,EAAG,GAAGC,KAAI,SAACC,EAAOC,GAAR,OACjC,kBAAC,IAAD,CACEjB,GAAI,CAAEC,KAAM,GAAIC,OAAQ,GACxBM,GAAU,IAANS,EAAU,CAAEhB,KAAM,EAAGC,OAAQ,GAAM,IACvCgB,IAAKF,EAAMG,gBAAgBC,IAC3B,kBAAC,IAAD,CAAKtB,MAAOkB,EAAMG,gBAAgBrB,MAAOM,UAAU,mBAIzD,kBAAC,IAAD,CAAKL,WAAS,GACZ,kBAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,GAAIC,OAAQ,GAAKM,GAAI,CAAEP,KAAM,EAAGC,OAAQ,IACvD,kf","file":"component---src-pages-projects-comic-manager-js-fb95dcbf076c39b33929.js","sourcesContent":["import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport '../../styles/bootstrap-4.3.1.min.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from 'gatsby-plugin-modal-routing';\r\nimport { graphql, useStaticQuery } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\nimport Layout from '../../components/layout/layout';\r\nimport SEO from '../../components/seo';\r\n\r\nconst StyledContainer = styled(Container)`\r\n  padding: 0;\r\n  margin: 0;\r\n  text-align: center;\r\n\r\n  .appImages {\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    border: 1px solid black;\r\n  }\r\n`;\r\n\r\nconst ComicManager = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query comicManagerImages {\r\n      images: allFile(filter: { relativeDirectory: { eq: \"comicmanager\" } }) {\r\n        nodes {\r\n          id\r\n          childImageSharp {\r\n            fluid(quality: 100) {\r\n              ...GatsbyImageSharpFluid_withWebp\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  console.log(data);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        title='Comic Manager'\r\n        description={'Information on my portfolio project Comic Manager'}\r\n        pathname={'/projects/comic-manager'}\r\n      />\r\n      <StyledContainer fluid>\r\n        <Row noGutters>\r\n          <Col xs={{ span: 1, offset: 11 }}>\r\n            <Link to={'/#projects'} className='noUnderline'>\r\n              <FontAwesomeIcon icon={faWindowClose} size='1x' />\r\n            </Link>\r\n          </Col>\r\n        </Row>\r\n        <Row noGutters>\r\n          <Col xs={{ span: 8, offset: 2 }}>\r\n            <h1 className='center'>Comic Manager</h1>\r\n            <hr className='hrTitle' />\r\n          </Col>\r\n        </Row>\r\n        <Row noGutters>\r\n          <Col xs={{ span: 10, offset: 1 }} md={{ span: 6, offset: 3 }}>\r\n            <p>\r\n              This is a mobile application that I have been creating in my spare\r\n              time to help me keep track of which storage box my various comic\r\n              books are located in. The application is created using Apache\r\n              Cordova, jQuery and a number of Apache Cordova plugins.\r\n            </p>\r\n            <p className='center'>\r\n              <a\r\n                href='https://github.com/dantay0803/ComicManager'\r\n                target='_blank'\r\n                rel='noopener noreferrer'>\r\n                Github Repository\r\n              </a>\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n        <Row noGutters>\r\n          {data.images.nodes.slice(0, 3).map((image, i) => (\r\n            <Col\r\n              xs={{ span: 10, offset: 1 }}\r\n              md={i === 0 ? { span: 2, offset: 2 } : '2'}\r\n              key={image.childImageSharp.id}>\r\n              <Img fluid={image.childImageSharp.fluid} className='appImages' />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row noGutters>\r\n          <Col xs={{ span: 10, offset: 1 }} md={{ span: 6, offset: 3 }}>\r\n            <p>\r\n              The application allows the user to scan the barcode of their\r\n              selected comic, performs a number of searches against the Google\r\n              Books API and lists the results for the user to select their\r\n              match. Once a comic has been selected they are taken to a form\r\n              where they can update the title, publisher, description of the\r\n              comic and set the box number where they can find the comic.\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n        <Row noGutters>\r\n          {data.images.nodes.slice(3, 6).map((image, i) => (\r\n            <Col\r\n              xs={{ span: 10, offset: 1 }}\r\n              md={i === 0 ? { span: 2, offset: 2 } : '2'}\r\n              key={image.childImageSharp.id}>\r\n              <Img fluid={image.childImageSharp.fluid} className='appImages' />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n        <Row noGutters>\r\n          <Col xs={{ span: 10, offset: 1 }} md={{ span: 6, offset: 3 }}>\r\n            <p>\r\n              All of the comics saved by the user are added to a list view and\r\n              saved in a database. The list view items allow the user to select\r\n              them to show a pop up with all of the information saved for the\r\n              comic. As well as a button to remove the list item and the comic\r\n              from the database. I also added the feature to export and import\r\n              the list of comics as a JSON file so they user can remove the app\r\n              or change their device without the need to rescan all of their\r\n              comics.\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n      </StyledContainer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ComicManager;\r\n"],"sourceRoot":""}